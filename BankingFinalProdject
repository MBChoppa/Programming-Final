/*
Author: Hale Walls & Evan Crabtree
Class: CSI-140-05
Assignment: Final Project 
Date Assigned: 10-16-23
Due Date: 12-10-23
Description:
Beglückwünschung1! You have been hired as the lead programmer for a bank. Your immediate task
is to create a new system for the bank tellers for their daily tasks. Your system must allow the tellers
to perform the following tasks. However, in order to perform these tasks, the bank teller must be
logging into the system first.

Certification of Authenticity:
I certify that this is entirely my own work, except where I have given
fully-documented references to the work of others. I understand the
definition and consequences of plagiarism and acknowledge that the assessor
of this assignment may, for the purpose of assessing this assignment:
Reproduce this assignment and provide a copy to another member of
academic staff; and/or
Communicate a copy of this assignment to a plagiarism checking
service (which may then retain a copy of this assignment on its
database for the purpose of future plagiarism checking) */

  //maybe to do: add verlassen 

#include <iostream>
#include <string>
#include <fstream>
using namespace std;

//defining functions.
void filemanip(string tellerinfo[][2], int numTellers, string accountinfo[][5], int numAccounts); 
void login(string tellerinfo[][2], int numTellers); 

const string TELLERS = "tellers.dat", ACCOUNTS = "accounts.dat"; //defining file names.

int main()
{
    //defning data variables. 
    string tellerinfo[10][2], accountinfo[30][5];
    int numTellers = 10, numAccounts = 30; //larger numbers to make room for new accounts.
    //calling the functions.
    filemanip(tellerinfo, numTellers, accountinfo, numAccounts);
    login(tellerinfo, numTellers);

  //The menu. 
  char choice;
    do 
    {
        cout << "Welcome to ___ Bank! What would you like to do?" << endl;
        cout << "1. Add a new account." << endl
            << "2. Delete an existing account." << endl
            << "3. Update account information." << endl
            << "4. Search account information." << endl
            << "5. Deposit money into an account." << endl
            << "6. Withdraw money from an account." << endl
            << "7. Check the balance of an account." << endl
            << "8. Log out." << endl;
        cin >> choice;

        switch (choice)
        {
        case '1': //Written by Evan Crabtree
        {
            cout << "Adding a new account." << endl;
            create_account();
            break;
        }
        case '2': //Written by Evan Crabtree
        {
            cout << "Deleting a new account." << endl;
            delete_account();
            break;
        }
        case '3': //Written by Evan Crabtree
        {
            cout << "Updating an existing account." << endl;
            update_account();
            break;
        }
        case '4': //Written by Hale Walls.
        {
            SearchAccount(accountinfo, numAccounts);
            break;
        }
        case '5': //Written by Hale Walls
        {
            DepositAccount(accountinfo, numAccounts);
            break;
        }
        case '6': //Written by Hale Walls
        {
            WithdrawAccount(accountinfo, accountfiles, numAccounts);
            break;
        }
        case '7': //Written by Hale Walls
        {
            cout << "Please enter the account number: "; 
            string num;
            int place = -1; //set up for checking validitiy. 
            cin >> num;

            for (int i = 0; i < 19; i++) //checks to see if the inputed number is valid.
            {
                if (accountinfo[i][0] == num)
                {
                    place = i;
                }
            }
            if (place == -1)
            {
                cout << "That is not an account that exists." << endl;
                break;
            }
            float balance;
            ifstream fin;
            fin.open(accountfiles[place]); //opens the account file.
            fin >> balance; //gets the balance number.
            fin.close();
            cout << "The balance for that account is $" << balance << "." << endl; //prints the balance currently in the account.

            break;
        }
        case '8': //Written by Hale Walls
        {
            cout << "Logging out..." << endl; 
            login(tellerinfo, numTellers); //sends the user back to the login.

            break;
        }
        default:
        {
            cout << "That is not a valid input." << endl; //covers all inputs that arent 1-8
            break;
        }
        }
    } while (choice != '8');

  return 0;
}

/*
Written By Hale Walls
Pre: All the information is on the file. 
Post: All the information is stored in Arrays. 
Purpose: To read all of the information from the files. 
*/
void filemanip(string tellerinfo[][2], int numTellers, string accountinfo[][5], int numAccounts)
{
    int count = 0;
    ifstream fin;
    fin.open(TELLERS); //opens tellers.dat
    while (fin >> tellerinfo[count][0]) //reads teller information from file.
    {
        fin >> tellerinfo[count][1];
        count++;
    }
    fin.close();
    count = 0;

    fin.open(ACCOUNTS); //opens accounts.dat
    while (fin >> accountinfo[count][0]) //reads account information from file.
    {
        string junk;
        fin >> accountinfo[count][1];
        getline(fin, junk);
        getline(fin, accountinfo[count][2]);
        getline(fin, accountinfo[count][3]);
        getline(fin, accountinfo[count][4]);
        cout << accountinfo[count][4] << endl;
        count++;
    }
}

/*
Written By Hale Walls
Pre: All the information has been read from the file. 
Post: The teller has logged in using their username and password. 
Purpose: To allow tellers to log in using their account info. 
*/
void login(string tellerinfo[][2], int numTellers)
{
    string username, password, target = ""; //defining variables.
    cout << "Please enter your username: ";
    cin >> username;
    for (int i = 0; i < numTellers; i++) //searches list of tellers for the input.
    {
        if (username == tellerinfo[i][0])
            target = tellerinfo[i][1];
    }
    if (target == "") //if input isn't valid, send back to start.
    {
        cout << "That username is not in our database." << endl;
        login(tellerinfo, numTellers);
    }
    else
    {
        cout << "Please enter your password: "; //prompts for password.
        cin >> password;
        if (password == target) //checks for validity.
        {
            return;
        }
        else
        {
            cout << "That is not the correct password." << endl;
            login(tellerinfo, numTellers);
        }
    }
}
